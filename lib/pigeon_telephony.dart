// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class TelephonyInfo {
  TelephonyInfo({
    this.networkCountryIso,
    this.mobileCountryCode,
    this.mobileNetworkCode,
    this.displayName,
    this.simState,
    this.isoCountryCode,
    this.cellId,
    this.phoneNumber,
    this.carrierName,
    this.networkGeneration,
    this.radioType,
  });

  String? networkCountryIso;

  String? mobileCountryCode;

  /// The mobile network code (MNC) for the user’s cellular service provider.
  String? mobileNetworkCode;

  /// The name of the user’s home cellular service provider.
  String? displayName;

  /// Constant indicating the state of the device SIM card in a logical slot; SIM_STATE_UNKNOWN, SIM_STATE_ABSENT, SIM_STATE_PIN_REQUIRED, SIM_STATE_PUK_REQUIRED, SIM_STATE_NETWORK_LOCKED, SIM_STATE_READY, SIM_STATE_NOT_READY, SIM_STATE_PERM_DISABLED, SIM_STATE_CARD_IO_ERROR, SIM_STATE_CARD_RESTRICTED,
  String? simState;

  /// The ISO country code for the user’s cellular service provider.
  String? isoCountryCode;

  /// The cell id (cid) and local area code
  CellId? cellId;

  /// Phone number of the sim
  String? phoneNumber;

  /// Carrier name of the sim
  String? carrierName;

  /// The mobile network radioType: 5G, 4G ... 2G
  String? networkGeneration;

  /// The mobile network generation: LTE, HSDPA, e.t.c
  String? radioType;

  Object encode() {
    return <Object?>[
      networkCountryIso,
      mobileCountryCode,
      mobileNetworkCode,
      displayName,
      simState,
      isoCountryCode,
      cellId?.encode(),
      phoneNumber,
      carrierName,
      networkGeneration,
      radioType,
    ];
  }

  static TelephonyInfo decode(Object result) {
    result as List<Object?>;
    return TelephonyInfo(
      networkCountryIso: result[0] as String?,
      mobileCountryCode: result[1] as String?,
      mobileNetworkCode: result[2] as String?,
      displayName: result[3] as String?,
      simState: result[4] as String?,
      isoCountryCode: result[5] as String?,
      cellId: result[6] != null
          ? CellId.decode(result[6]! as List<Object?>)
          : null,
      phoneNumber: result[7] as String?,
      carrierName: result[8] as String?,
      networkGeneration: result[9] as String?,
      radioType: result[10] as String?,
    );
  }
}

class CellId {
  CellId({
    this.cid,
    this.lac,
  });

  int? cid;

  int? lac;

  Object encode() {
    return <Object?>[
      cid,
      lac,
    ];
  }

  static CellId decode(Object result) {
    result as List<Object?>;
    return CellId(
      cid: result[0] as int?,
      lac: result[1] as int?,
    );
  }
}

class _TelephonyAPICodec extends StandardMessageCodec {
  const _TelephonyAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CellId) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is TelephonyInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CellId.decode(readValue(buffer)!);
      case 129: 
        return TelephonyInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class TelephonyAPI {
  /// Constructor for [TelephonyAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TelephonyAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _TelephonyAPICodec();

  Future<List<TelephonyInfo?>?> getInfo() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.TelephonyAPI.getInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as List<Object?>?)?.cast<TelephonyInfo?>();
    }
  }
}
