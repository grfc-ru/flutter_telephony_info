// Autogenerated from Pigeon (v9.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.grfc.telephony.flutter_telephony_info;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Telephony {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TelephonyInfo {
    /** The name of the user’s home cellular service provider. */
    private @Nullable String displayName;

    public @Nullable String getDisplayName() {
      return displayName;
    }

    public void setDisplayName(@Nullable String setterArg) {
      this.displayName = setterArg;
    }

    /** The mobile network code (MNC) for the user’s cellular service provider. */
    private @Nullable String mobileNetworkCode;

    public @Nullable String getMobileNetworkCode() {
      return mobileNetworkCode;
    }

    public void setMobileNetworkCode(@Nullable String setterArg) {
      this.mobileNetworkCode = setterArg;
    }

    /** The mobile network generation: LTE, HSDPA, e.t.c */
    private @Nullable String radioType;

    public @Nullable String getRadioType() {
      return radioType;
    }

    public void setRadioType(@Nullable String setterArg) {
      this.radioType = setterArg;
    }

    /** The mobile network radioType: 5G, 4G ... 2G */
    private @Nullable String networkGeneration;

    public @Nullable String getNetworkGeneration() {
      return networkGeneration;
    }

    public void setNetworkGeneration(@Nullable String setterArg) {
      this.networkGeneration = setterArg;
    }

    /** The cell id (cid) and local area code */
    private @Nullable String cellId;

    public @Nullable String getCellId() {
      return cellId;
    }

    public void setCellId(@Nullable String setterArg) {
      this.cellId = setterArg;
    }

    /** The cell signal strenght */
    private @Nullable String cellSignalStrength;

    public @Nullable String getCellSignalStrength() {
      return cellSignalStrength;
    }

    public void setCellSignalStrength(@Nullable String setterArg) {
      this.cellSignalStrength = setterArg;
    }

    public static final class Builder {

      private @Nullable String displayName;

      public @NonNull Builder setDisplayName(@Nullable String setterArg) {
        this.displayName = setterArg;
        return this;
      }

      private @Nullable String mobileNetworkCode;

      public @NonNull Builder setMobileNetworkCode(@Nullable String setterArg) {
        this.mobileNetworkCode = setterArg;
        return this;
      }

      private @Nullable String radioType;

      public @NonNull Builder setRadioType(@Nullable String setterArg) {
        this.radioType = setterArg;
        return this;
      }

      private @Nullable String networkGeneration;

      public @NonNull Builder setNetworkGeneration(@Nullable String setterArg) {
        this.networkGeneration = setterArg;
        return this;
      }

      private @Nullable String cellId;

      public @NonNull Builder setCellId(@Nullable String setterArg) {
        this.cellId = setterArg;
        return this;
      }

      private @Nullable String cellSignalStrength;

      public @NonNull Builder setCellSignalStrength(@Nullable String setterArg) {
        this.cellSignalStrength = setterArg;
        return this;
      }

      public @NonNull TelephonyInfo build() {
        TelephonyInfo pigeonReturn = new TelephonyInfo();
        pigeonReturn.setDisplayName(displayName);
        pigeonReturn.setMobileNetworkCode(mobileNetworkCode);
        pigeonReturn.setRadioType(radioType);
        pigeonReturn.setNetworkGeneration(networkGeneration);
        pigeonReturn.setCellId(cellId);
        pigeonReturn.setCellSignalStrength(cellSignalStrength);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(displayName);
      toListResult.add(mobileNetworkCode);
      toListResult.add(radioType);
      toListResult.add(networkGeneration);
      toListResult.add(cellId);
      toListResult.add(cellSignalStrength);
      return toListResult;
    }

    static @NonNull TelephonyInfo fromList(@NonNull ArrayList<Object> list) {
      TelephonyInfo pigeonResult = new TelephonyInfo();
      Object displayName = list.get(0);
      pigeonResult.setDisplayName((String) displayName);
      Object mobileNetworkCode = list.get(1);
      pigeonResult.setMobileNetworkCode((String) mobileNetworkCode);
      Object radioType = list.get(2);
      pigeonResult.setRadioType((String) radioType);
      Object networkGeneration = list.get(3);
      pigeonResult.setNetworkGeneration((String) networkGeneration);
      Object cellId = list.get(4);
      pigeonResult.setCellId((String) cellId);
      Object cellSignalStrength = list.get(5);
      pigeonResult.setCellSignalStrength((String) cellSignalStrength);
      return pigeonResult;
    }
  }

  private static class TelephonyAPICodec extends StandardMessageCodec {
    public static final TelephonyAPICodec INSTANCE = new TelephonyAPICodec();

    private TelephonyAPICodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return TelephonyInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof TelephonyInfo) {
        stream.write(128);
        writeValue(stream, ((TelephonyInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface TelephonyAPI {

    @Nullable 
    List<TelephonyInfo> getInfo();

    /** The codec used by TelephonyAPI. */
    static MessageCodec<Object> getCodec() {
      return TelephonyAPICodec.INSTANCE;
    }
    /**Sets up an instance of `TelephonyAPI` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, TelephonyAPI api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.TelephonyAPI.getInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  List<TelephonyInfo> output = api.getInfo();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
